-----------------------------------------------------------
	Abstract Classes
-----------------------------------------------------------

[java]
	abstract class Customer {
		// Methods and fields
		public abstract void displayDetails(); //This is an abstract method
	}	
	[\java]

	Abstract Facts:
	1. Abstract classes and methods must be fully implemented
		a. Abstract Constructors can also be called later through !!super.!!, however they cannot directly be instantiated
	2. Abstract classes are used to enforce implementation
	3. Can be used as a reference but cannot be instantiated
	4. Concrete classes are ones without abstract on the front
	5. Concrete methods in abstract classes can 

	[java]
	final class RegularCustomer extends Customer {
		
		@Override
		public void displayDetails() {			   // Overriding the abstract method of parent class
			// Implementation
		}
		
		// Other methods
	}
[\java]

Abstract Quiz 1:
. Final Does not Allow any Subclasses
. Abstract classes can have concrete methods
. Concrete subclasses of an abstract class must override all its abstract methods
. Abstract classes can have abstract methods
. Subclasses of abstract classes may or may not be abstract

[java] //This is Abstract Classes and Methods Exercise
	public abstract class Student {
		
		private String name;
		private int[] test = new int[4];
		private String result;
		
		
		public Student(String name) {
			super();
			this.name = name;
		}
		
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String getResult() {
			return result;
		}
		public void setResult(String result) {
			this.result = result;
		}
		public int[] getTest() {
			return test;
		}
		
		public void setTestScore(int testNumber, int testScore) {
			if(testNumber>3) {
				return;
			}
			test[testNumber] = testScore;
		}
		
		public abstract void generateResult();
	}

	public class UndergraduateStudent extends Student{
		
		public UndergraduateStudent(String name) {
			super(name);
		}
		
		public void generateResult() {
			int total = 0;
			for(int x : this.getTest()) {
				total +=x;
			}
			this.setResult( total >= 240 ? "Pass" : "Fail");
		}
	}
	public class GraduateStudent extends Student{
		
		public GraduateStudent(String name) {
			super(name);
		}
		
		public void generateResult() {
			int total = 0;
			for(int x : this.getTest()) {
				total +=x;
			}
			this.setResult( total >= 280 ? "Pass" : "Fail");
		}
	}
	public class Tester {

		public static void main(String[] args) {
			Student gs = new GraduateStudent("Ajay");
			gs.setTestScore(0, 70);
			gs.setTestScore(1, 69);
			gs.setTestScore(2, 71);
			gs.setTestScore(3, 55);
			gs.generateResult();
			System.out.println("Name:	" + gs.getName());
			System.out.println("Result:  " + gs.getResult() + "\n");
			
			Student ugs = new UndergraduateStudent("Mehul");
			ugs.setTestScore(0, 70);
			ugs.setTestScore(1, 69);
			ugs.setTestScore(2, 71);
			ugs.setTestScore(3, 55);
			ugs.generateResult();
			System.out.println("Name:	" + ugs.getName());
			System.out.println("Result:  " + ugs.getResult() + "\n");
		}
	}
[\java]

-----------------------------------------------------------
	Interfaces
-----------------------------------------------------------
========================================================================================================================
Interface Facts:
1. Interfaces are generic attributes/methods that can be implemented to other classes
	a. Contains method signatures and constant declarations (means there are values as well i.e. int DEF_VALUE = 5;)
2. It can have static abstract or default things, however they cannot have concrete methods except for static Since JAVA8
3. Variables that are instantiated are set to public static final
	a. Cannot be reassigned in the implemented class, however if you define another variable with the same name you can
		call the seperate attributes with the class.name and interface.name
	b. The methods declared in an interface are implicitly public and abstract, and the data fields are implicitly public, 
		static and final
4. Methods that are made in interfaces are public abstract, if you want to have a body you must have static
5. Interfaces can extend multiple Interfaces to make (Multiple Inheritance)
6. Classes can extend one class and implement multiple interfaces at the same time
7. Classes must implement every method in the interface, or else be declared abstract and have the methods implemented in
	a child class static methods inside the interface do not need to be in the implemented class
========================================================================================================================

[java]
	public interface Student {
		int TOTAL_MAXIMUM_MARKS = 400;
		void calcPercentage();
	}

	public class Intern implements Student{
		
		private int marksSecured;
		private int projectMarks;
		
		Intern(int marksSecured, int projectMarks) {
			this.marksSecured = marksSecured;
			this.projectMarks = projectMarks;
		}
		
		public void calcPercentage() {
			if(this.marksSecured + this.projectMarks > 400) {
				System.out.println("Please enter the correct marks");
				return;
			}
			System.out.println("The total aggregate percentage secured by the intern is " + ((double)marksSecured+projectMarks)/TOTAL_MAXIMUM_MARKS*100);
		}
	}

	public class Trainee implements Student{
		
		int marksSecured;
		
		public Trainee(int marksSecured) {
			this.marksSecured = marksSecured;
		}
		
		
		public void calcPercentage() {
			if(this.marksSecured > 400) {
				System.out.println("Please enter the correct marks");
				return;
			}
			System.out.println("The total aggregate percentage secured by the trainee is " + (double)marksSecured/TOTAL_MAXIMUM_MARKS*100);
		}
		
	}

	public class Tester {

		public static void main(String[] args) {
			// TODO Auto-generated method stub
			Intern i = new Intern(283, 77);
			Trainee t = new Trainee(370);
			i.calcPercentage();
			t.calcPercentage();
		}

	}
[\java]

-----------------------------------------------------------
	Variable Args
-----------------------------------------------------------

================================================================================
VarArgs Facts:
- Varargs can be passed 0 or n arguments
- Only one vararg can be passed per method, if used must be last in parameter
- Better than using overloading because it can do multiple things in one method
- Sending an array as a parameter is accepted
================================================================================


This is the format for varargs ->	[java]
										public float orderProducts(Product... products) {
											// Statements
										}
									[\java]



-----------------------------------------------------------
	Memory Management
-----------------------------------------------------------

===========================================================================================================
Memory is divided into !Stack! and !Heap!
- Whenever there is memory allocation there must be memory deallocation as well
- Memory_Leak: when something is unreachable and not in use but not freed.
- Earlier things like C/C++ made programmer responsible for freeing memory but Java has #Garbage Collector
	. Objects without reference become elligible for garbage collection
		- Set reference = null in order to make things elligible for garbage collection
		- Local variables that are used after the method is finished are collected as well
- Cannot be certain of when garbage collection will occur
- Local variables disappear from the stack when the method is finished
===========================================================================================================

Order of Creation:
- Statement: [java]{Customer cust1 = new Customer(31, 9663472291)}[\java]
	1. Reference variable (cust1) is created in the stack
	2. Object is created in the Heap (customerid: 31, phoneNumber: 9663472291)
	3. Reference variable in stack refers to the object in the Heap

-----------------------------------------------------------
	Code Analysis
-----------------------------------------------------------

