-----------------------------------------------------------
	Object Class
-----------------------------------------------------------

- Everything from int -> String -> Custom Classes extend Object class
- Whenever you override .equals() method you need to override .hashCode();
	. Only rule with this is if .equals() returns true the two objects hashCode's must be equal as well
	. The reverse does not need to be true
- .toString() is another method that can be overridden in order to display a string that makes sense for your
	custom object

-----------------------------------------------------------
	Strings
-----------------------------------------------------------

- Strings are immutable, meaning they cannot be altered or changed
- string += "x"; is an illusion that the string is being altered however what is really happening is that a new String
	is being made and assigned to that reference
	. What_You_See:				string += "x";
	. What_Actually_Happens:	string = string.concat("x");
								-----------or---------------
								string = string + "x"; //As you can see it is actually being made and reassigned.
- .intern() checks the literal pool
- "SomeString" <- literals come from the same pool however new String("SomeString") <- Creates a new one even if it already
	exists
- .concat() always creates a new String instead of checking the pool
- .equals() compares the contents of the String
- == compares the memory values of the String
- Non-Literal + Literal means the same as .concat() it creates another one without checking the pool

==================================================================
!.equals() and .hashCode() are not overridden!
	<StringBuffer:> thread-safe and mutable
		- Capacity can be dynamically increased
		- Faster and less memory during manipulations
		- append(), insert(), delete(), reverse()

	<StringBuilder:> thread-unsafe (a little faster) and mutable
		- Same as above
==================================================================

-----------------------------------------------------------
	Wrapper Classes
-----------------------------------------------------------

- Used to represent primitive values as objects
- Character wrapper = new Character('x');
- Character wrapper = 'x';	//Java5 and up includes autoboxing
- char c = wrapper 			//This is unboxing to remove a wrapper
